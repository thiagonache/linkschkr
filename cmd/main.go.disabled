package main

import (
	"log"
	"time"
)

type Rate struct {
	Count    int
	Max      int
	Start    time.Time
	Interval time.Duration
}

type Limiter struct {
	Items map[string]Rate
	Input chan string
}

func (l Limiter) Start() {
	for i := range l.Input {
		v, ok := l.Items[i]
		if !ok {
			l.Items[i] = Rate{
				Count:    1,
				Start:    time.Now(),
				Interval: time.Second,
				Max:      100,
			}
			go log.Println("DO the work", i)
			continue
		}
		start := v.Start
		elapsed := time.Since(start)
		if v.Count >= v.Max {
			time.Sleep(v.Interval - elapsed)
			v.Start = time.Now()
			v.Count = 0
		}
		v.Count++
		l.Items[i] = v
		go log.Println("DO the work", i)
	}
}

func main() {
	l := Limiter{
		Items: map[string]Rate{},
		Input: make(chan string),
	}

	go l.Start()
	for i := 0; i < 100000; i++ {
		go func() { l.Input <- "www.google.com" }()
	}
	time.Sleep(60 * time.Second)
}
